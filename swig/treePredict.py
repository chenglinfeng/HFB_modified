# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_treePredict')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_treePredict')
    _treePredict = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_treePredict', [dirname(__file__)])
        except ImportError:
            import _treePredict
            return _treePredict
        try:
            _mod = imp.load_module('_treePredict', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _treePredict = swig_import_helper()
    del swig_import_helper
else:
    import _treePredict
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def cdata(ptr, nelements=1):
    return _treePredict.cdata(ptr, nelements)
cdata = _treePredict.cdata

def memmove(data, indata):
    return _treePredict.memmove(data, indata)
memmove = _treePredict.memmove
class bytesArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bytesArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bytesArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _treePredict.new_bytesArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _treePredict.delete_bytesArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _treePredict.bytesArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _treePredict.bytesArray___setitem__(self, index, value)

    def cast(self):
        return _treePredict.bytesArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_treePredict.bytesArray_frompointer)
    else:
        frompointer = _treePredict.bytesArray_frompointer
bytesArray_swigregister = _treePredict.bytesArray_swigregister
bytesArray_swigregister(bytesArray)

def bytesArray_frompointer(t):
    return _treePredict.bytesArray_frompointer(t)
bytesArray_frompointer = _treePredict.bytesArray_frompointer

class uintsArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uintsArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uintsArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _treePredict.new_uintsArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _treePredict.delete_uintsArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _treePredict.uintsArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _treePredict.uintsArray___setitem__(self, index, value)

    def cast(self):
        return _treePredict.uintsArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_treePredict.uintsArray_frompointer)
    else:
        frompointer = _treePredict.uintsArray_frompointer
uintsArray_swigregister = _treePredict.uintsArray_swigregister
uintsArray_swigregister(uintsArray)

def uintsArray_frompointer(t):
    return _treePredict.uintsArray_frompointer(t)
uintsArray_frompointer = _treePredict.uintsArray_frompointer

class TreeUser(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TreeUser, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TreeUser, name)
    __repr__ = _swig_repr

    def get_select_share_size(self, node_size):
        return _treePredict.TreeUser_get_select_share_size(self, node_size)

    def gen_select_random_share(self, share_out, len):
        return _treePredict.TreeUser_gen_select_random_share(self, share_out, len)

    def select_in_table(self, out, olen, select_values, features_index, feature_size, share, node_size, homo_table_file_name):
        return _treePredict.TreeUser_select_in_table(self, out, olen, select_values, features_index, feature_size, share, node_size, homo_table_file_name)

    def ot_one_get_onlice_choices_size(self, ot_size):
        return _treePredict.TreeUser_ot_one_get_onlice_choices_size(self, ot_size)

    def ot_one_gen_online_choice(self, online_choices, select_share, len):
        return _treePredict.TreeUser_ot_one_gen_online_choice(self, online_choices, select_share, len)

    def ot_one_gen_offset(self, offset_out, online_choices, offline_choice, len, n):
        return _treePredict.TreeUser_ot_one_gen_offset(self, offset_out, online_choices, offline_choice, len, n)

    def ot_one_do(self, share_out, compress_node_exs, online_choices, key, ot_size):
        return _treePredict.TreeUser_ot_one_do(self, share_out, compress_node_exs, online_choices, key, ot_size)

    def ot_two_get_onlice_choices_size(self, ot_size):
        return _treePredict.TreeUser_ot_two_get_onlice_choices_size(self, ot_size)

    def ot_two_gen_online_choice(self, online_choices, ot_one_return_share, tree_height):
        return _treePredict.TreeUser_ot_two_gen_online_choice(self, online_choices, ot_one_return_share, tree_height)

    def ot_two_gen_offset(self, offset_out, online_choices, offline_choices, first_layer_size, middle_layer_size, end_layer_size):
        return _treePredict.TreeUser_ot_two_gen_offset(self, offset_out, online_choices, offline_choices, first_layer_size, middle_layer_size, end_layer_size)

    def ot_two_do(self, share_out, en_datas, first_layer_size, middle_layer_size, end_layer_size, keys, online_choices):
        return _treePredict.TreeUser_ot_two_do(self, share_out, en_datas, first_layer_size, middle_layer_size, end_layer_size, keys, online_choices)

    def ot_three_get_onlice_choices_size(self, ot_size):
        return _treePredict.TreeUser_ot_three_get_onlice_choices_size(self, ot_size)

    def ot_three_gen_online_choice(self, online_choices, ot_two_return_share, first_layer_size, middle_layer_size, end_layer_size, tree_height):
        return _treePredict.TreeUser_ot_three_gen_online_choice(self, online_choices, ot_two_return_share, first_layer_size, middle_layer_size, end_layer_size, tree_height)

    def ot_three_gen_offset(self, offset_out, online_choices, offline_choice, len, n):
        return _treePredict.TreeUser_ot_three_gen_offset(self, offset_out, online_choices, offline_choice, len, n)

    def ot_three_do(self, random_out, en_datas, online_choices, keys, ot_n, ot_size):
        return _treePredict.TreeUser_ot_three_do(self, random_out, en_datas, online_choices, keys, ot_n, ot_size)

    def __init__(self):
        this = _treePredict.new_TreeUser()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _treePredict.delete_TreeUser
    __del__ = lambda self: None
TreeUser_swigregister = _treePredict.TreeUser_swigregister
TreeUser_swigregister(TreeUser)

class TreeModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TreeModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TreeModel, name)
    __repr__ = _swig_repr

    def generate_homo_table(self, features_value, features_set, node_size, features_size, tb_file_name, pk_file_name, pr_file_name):
        return _treePredict.TreeModel_generate_homo_table(self, features_value, features_set, node_size, features_size, tb_file_name, pk_file_name, pr_file_name)

    def get_pack_size(self, node_size):
        return _treePredict.TreeModel_get_pack_size(self, node_size)

    def decrypto_packing_value(self, pack_out, pack_size, en_pack_value, en_pack_size, pr_file_name):
        return _treePredict.TreeModel_decrypto_packing_value(self, pack_out, pack_size, en_pack_value, en_pack_size, pr_file_name)

    def ot_one_get_share_size(self, ot_size):
        return _treePredict.TreeModel_ot_one_get_share_size(self, ot_size)

    def ot_one_gen_random_share(self, share_out, len):
        return _treePredict.TreeModel_ot_one_gen_random_share(self, share_out, len)

    def ot_one_do_out_size(self, node_size):
        return _treePredict.TreeModel_ot_one_do_out_size(self, node_size)

    def ot_one_do(self, out, pack_value, share, node_size, key_sets, offset):
        return _treePredict.TreeModel_ot_one_do(self, out, pack_value, share, node_size, key_sets, offset)

    def ot_two_get_share_size(self, ot_size):
        return _treePredict.TreeModel_ot_two_get_share_size(self, ot_size)

    def ot_two_gen_random_share(self, share_out, len):
        return _treePredict.TreeModel_ot_two_gen_random_share(self, share_out, len)

    def ot_two_do_out_size(self, first_layer_size, middle_layer_size, end_layer_size):
        return _treePredict.TreeModel_ot_two_do_out_size(self, first_layer_size, middle_layer_size, end_layer_size)

    def ot_two_do(self, out, ot_one_shares, shares, key_sets, offset, first_layer_size, middle_layer_size, end_layer_size, tree_height, ot_n):
        return _treePredict.TreeModel_ot_two_do(self, out, ot_one_shares, shares, key_sets, offset, first_layer_size, middle_layer_size, end_layer_size, tree_height, ot_n)

    def ot_three_get_values_size(self, ot_size):
        return _treePredict.TreeModel_ot_three_get_values_size(self, ot_size)

    def ot_three_get_random_nums_size(self, ot_size):
        return _treePredict.TreeModel_ot_three_get_random_nums_size(self, ot_size)

    def ot_three_gen_random_nums(self, nums, len):
        return _treePredict.TreeModel_ot_three_gen_random_nums(self, nums, len)

    def ot_three_do_out_size(self, tree_height, end_layer_size):
        return _treePredict.TreeModel_ot_three_do_out_size(self, tree_height, end_layer_size)

    def ot_three_do(self, out, ot_two_shares, random_nums, values, key_sets, offset, first_layer_size, middle_layer_size, end_layer_size, tree_height):
        return _treePredict.TreeModel_ot_three_do(self, out, ot_two_shares, random_nums, values, key_sets, offset, first_layer_size, middle_layer_size, end_layer_size, tree_height)

    def __init__(self):
        this = _treePredict.new_TreeModel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _treePredict.delete_TreeModel
    __del__ = lambda self: None
TreeModel_swigregister = _treePredict.TreeModel_swigregister
TreeModel_swigregister(TreeModel)

class TreeOfflineOT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TreeOfflineOT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TreeOfflineOT, name)
    __repr__ = _swig_repr

    def __init__(self, node_size):
        this = _treePredict.new_TreeOfflineOT(node_size)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def offline_ot_sender_gen_A_half(self, a_half_out):
        return _treePredict.TreeOfflineOT_offline_ot_sender_gen_A_half(self, a_half_out)

    def offline_ot_sender_gen_key_set(self, key_set, b_half, n):
        return _treePredict.TreeOfflineOT_offline_ot_sender_gen_key_set(self, key_set, b_half, n)

    def offline_ot_sender_gen_all_key_sets(self, key_sets, b_halfs, ot_size, ot_n):
        return _treePredict.TreeOfflineOT_offline_ot_sender_gen_all_key_sets(self, key_sets, b_halfs, ot_size, ot_n)

    def offline_ot_sender_key_sets_size(self, ot_size, ot_n):
        return _treePredict.TreeOfflineOT_offline_ot_sender_key_sets_size(self, ot_size, ot_n)

    def offline_ot_receiver_offline_choices_size(self, ot_size):
        return _treePredict.TreeOfflineOT_offline_ot_receiver_offline_choices_size(self, ot_size)

    def offline_ot_receiver_gen_offline_choices_ot_one(self, offline_choice, len, ot_n):
        return _treePredict.TreeOfflineOT_offline_ot_receiver_gen_offline_choices_ot_one(self, offline_choice, len, ot_n)

    def offline_ot_receiver_gen_offline_choices_ot_two(self, offline_choice, len):
        return _treePredict.TreeOfflineOT_offline_ot_receiver_gen_offline_choices_ot_two(self, offline_choice, len)

    def offline_ot_receiver_gen_offline_choices_ot_three(self, offline_choice, len, ot_n):
        return _treePredict.TreeOfflineOT_offline_ot_receiver_gen_offline_choices_ot_three(self, offline_choice, len, ot_n)

    def offline_ot_receiver_gen_key(self, b_half_out, a_half, offline_choice, n):
        return _treePredict.TreeOfflineOT_offline_ot_receiver_gen_key(self, b_half_out, a_half, offline_choice, n)

    def offline_ot_receiver_gen_all_keys(self, keys, a_half, b_halfs, offline_choice, ot_size, ot_n):
        return _treePredict.TreeOfflineOT_offline_ot_receiver_gen_all_keys(self, keys, a_half, b_halfs, offline_choice, ot_size, ot_n)

    def offline_ot_receiver_b_halfs_size(self, ot_size):
        return _treePredict.TreeOfflineOT_offline_ot_receiver_b_halfs_size(self, ot_size)

    def offline_ot_receiver_keys_size(self, ot_size):
        return _treePredict.TreeOfflineOT_offline_ot_receiver_keys_size(self, ot_size)

    def get_tree_height(self):
        return _treePredict.TreeOfflineOT_get_tree_height(self)

    def get_first_layer_size(self):
        return _treePredict.TreeOfflineOT_get_first_layer_size(self)

    def get_middle_layer_size(self):
        return _treePredict.TreeOfflineOT_get_middle_layer_size(self)

    def get_end_layer_size(self):
        return _treePredict.TreeOfflineOT_get_end_layer_size(self)

    def ot_one_get_ot_n(self):
        return _treePredict.TreeOfflineOT_ot_one_get_ot_n(self)

    def ot_one_get_ot_size(self):
        return _treePredict.TreeOfflineOT_ot_one_get_ot_size(self)

    def ot_two_get_ot_n(self):
        return _treePredict.TreeOfflineOT_ot_two_get_ot_n(self)

    def ot_two_get_ot_size(self):
        return _treePredict.TreeOfflineOT_ot_two_get_ot_size(self)

    def ot_three_get_ot_n(self):
        return _treePredict.TreeOfflineOT_ot_three_get_ot_n(self)

    def ot_three_get_ot_size(self):
        return _treePredict.TreeOfflineOT_ot_three_get_ot_size(self)
    __swig_destroy__ = _treePredict.delete_TreeOfflineOT
    __del__ = lambda self: None
TreeOfflineOT_swigregister = _treePredict.TreeOfflineOT_swigregister
TreeOfflineOT_swigregister(TreeOfflineOT)

# This file is compatible with both classic and new-style classes.


